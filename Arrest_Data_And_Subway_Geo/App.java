/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dataingestion;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.jasper.tagplugins.jstl.core.Catch;
import org.osgeo.proj4j.BasicCoordinateTransform;
import org.osgeo.proj4j.CRSFactory;
import org.osgeo.proj4j.CoordinateReferenceSystem;
import org.osgeo.proj4j.ProjCoordinate;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.Counter;
import org.apache.hadoop.mapreduce.CounterGroup;
import org.apache.hadoop.mapreduce.Counters;
import org.apache.hadoop.mapreduce.Job;

public class App {

    public static void main(String[] args)
            throws IOException, ClassNotFoundException, InterruptedException, URISyntaxException {
        // if (args.length != 1) {
        // System.err.println("Usage: Arrest Data Profiler <input path>");
        // }
        // Job job = Job.getInstance();
        // job.setJarByClass(App.class);
        // job.setJobName("Arrest Data Profiling");
        //
        // FileInputFormat.addInputPath(job, new Path(args[0]));
        // File file = new File(args[0] + "_MappedOutput");
        // if (file.exists() || file.isDirectory()) {
        // file.delete();
        // }
        // FileOutputFormat.setOutputPath(job, new Path(file.getPath()));
        //
        // job.setMapperClass(IngestMapper.class);
        //// Map only job
        // job.setNumReduceTasks(0);
        //
        // job.waitForCompletion(true);
        //
        //// Job 2: Unique crime data
        // Job job2 = Job.getInstance();
        // job2.setJarByClass(App.class);
        // job2.setJobName("Arrest Data Profiling -> Get unique crimes");
        // FileInputFormat.addInputPath(job2, new Path(args[0]));
        // File file2 = new File(args[0] + "_MappedOutput2");
        // file2.delete();
        // FileOutputFormat.setOutputPath(job, new Path(file.getPath()));
        // job2.setMapperClass(UniqueCrimesMapper.class);
        // job2.setMapOutputKeyClass(Text.class);
        // job2.setReducerClass(UniqueCrimesReducer.class);
        // job2.setNumReduceTasks(1);
        // job2.waitForCompletion(true);
        //// Print counters
        // Counters counters = job2.getCounters();
        //
        // System.out.println("Bourough Count per Crime");
        // CounterGroup dynamicGroup = counters.getGroup("Dyanmic_Bourough_Count");
        // for (Counter counter : dynamicGroup) {
        // switch (counter.getDisplayName().toLowerCase()) {
        // case "b":
        // System.out.println("Bronx: " + counter.getValue());
        // break;
        // case "s":
        // System.out.println("Staten Island: " + counter.getValue());
        // break;
        // case "k":
        // System.out.println("Brooklyn: " + counter.getValue());
        // break;
        // case "m":
        // System.out.println("Manhattan: " + counter.getValue());
        // break;
        // case "q":
        // System.out.println("Queens: " + counter.getValue());
        // break;
        // default:
        // System.out.println("Undefined: " + counter.getValue());
        // }
        // }
        //
        //// Job 3: Subway Geo Information
        // Job job3 = Job.getInstance();
        // job3.setJarByClass(App.class);
        // job3.setJobName("Subway Data Profiling -> Clean and Break Up Data");
        // FileInputFormat.addInputPath(job3, new Path(args[0]));
        // File file3 = new File(args[0] + "_MappedOutput3");
        // file3.delete();
        // FileOutputFormat.setOutputPath(job3, new Path(file.getPath()));
        // job3.setMapperClass(SubwayGeoMapper.class);
        // job3.setNumReduceTasks(0);
        // job3.waitForCompletion(true);
        //
        //// Job 4: Filter out non-violent felonies
        // Job job4 = Job.getInstance();
        // job4.setJarByClass(App.class);
        // job4.setJobName("Arrest Data Profiling -> Violent Crimes");
        // FileInputFormat.addInputPath(job4, new Path(args[0]));
        // File file4 = new File(args[0] + "_MappedOutput4");
        // file4.delete();
        // FileOutputFormat.setOutputPath(job4, new Path(file4.getPath()));
        // job4.setMapperClass(ViolentCrimesMapper.class);
        // job4.setNumReduceTasks(0);
        // job4.waitForCompletion(true);
        //
        //// Job 5: Replicated Side Join of Subways with felonious crimes
        // Configuration conf = new Configuration();
        // Job job5 = Job.getInstance(conf, "Replicated Join");
        // job5.setJarByClass(App.class);
        //
        // String cachedSubways = new Path(args[0]).toString();
        // Path crimeInput = new Path(args[1]);
        // FileInputFormat.addInputPath(job5, crimeInput);
        //// Cache the files
        // job5.addCacheFile(new URI(cachedSubways + "#label1"));
        //// Output
        // File file5 = new File(args[1] + "_MappedOutput5");
        // file5.delete();
        // FileOutputFormat.setOutputPath(job5, new Path(file5.getPath()));
        // job5.setMapperClass(SubwayJoinMapper.class);
        // job5.setMapOutputKeyClass(IntWritable.class);
        // job5.setReducerClass(SubwayJoinReducer.class);
        // job5.setNumReduceTasks(1);
        // job5.waitForCompletion(true);
        //
        //// Job 6: Replicated Side Join of Subways with felonious crimes
        // Configuration conf = new Configuration();
        // Job job6 = Job.getInstance(conf, "Replicated Join -> Arrest Data with Subway
        // Stations");
        // job6.setJarByClass(App.class);
        // String cachedSubways = new Path(args[0]).toString();
        // Path crimeInput = new Path(args[1]);
        // FileInputFormat.addInputPath(job6, crimeInput);
        //// Cache the files
        // job6.addCacheFile(new URI(cachedSubways + "#label1"));
        //// Output
        // File file6 = new File(args[1] + "_MappedOutput6");
        // file6.delete();
        // FileOutputFormat.setOutputPath(job6, new Path(file6.getPath()));
        // job6.setMapperClass(ArrestJoinMapper.class);
        //// Map only
        // job6.setNumReduceTasks(0);
        // job6.waitForCompletion(true);

        // Convert X and Y EPSG2263 to EPSG4326
        // CRSFactory factory = new CRSFactory();
        // CoordinateReferenceSystem srcCrs = factory.createFromName("EPSG:2263");
        // CoordinateReferenceSystem dstCrs = factory.createFromName("EPSG:4326");
        // BasicCoordinateTransform transform = new BasicCoordinateTransform(srcCrs,
        // dstCrs);
        //
        // final ProjCoordinate sCoordinate = new ProjCoordinate();
        // final ProjCoordinate dCoordinate = new ProjCoordinate();
        // try (final BufferedReader sourceTxt = new BufferedReader(
        // new FileReader("D:\\Asad Ranavaya\\Desktop\\stop_and_frisk_2013-16"));
        // final BufferedWriter dstTxt = new BufferedWriter(new
        // FileWriter("sto_and_frisk_2013_16_xyFixed"));) {
        // String line = sourceTxt.readLine();
        // String[] lineSplit = null;
        // while (line != null) {
        // if (line != null) {
        // lineSplit = line.split(",");
        // }
        // sCoordinate.setValue(Integer.parseInt(lineSplit[3]),
        // Integer.parseInt(lineSplit[4]));
        // // Transform from EPSG2263 to EPSG4326
        // // x,y -> long,lat
        // transform.transform(sCoordinate, dCoordinate);
        // // Write it back without array.print reference
        // final String writeBack = lineSplit[0] + "," + lineSplit[1] + "," +
        // lineSplit[2] + "," + dCoordinate.y
        // + ","
        // + dCoordinate.x + "\n";
        // dstTxt.write(writeBack);
        // line = sourceTxt.readLine();
        // }
        //
        // } catch (IOException e) {
        // System.out.println(e.getMessage());
        // }

        //// Job 7: Map Stop and Frisk data to subways
        // Configuration conf = new Configuration();
        // Job job7 = Job.getInstance(conf, "Replicated Join -> Stop and Frisk with
        //// Subway Stations");
        // job7.setJarByClass(App.class);
        // String cachedSubways = new Path(args[0]).toString();
        // Path crimeInput = new Path(args[1]);
        // FileInputFormat.addInputPath(job7, crimeInput);
        //// Cache the files
        // job7.addCacheFile(new URI(cachedSubways + "#label1"));
        //// Output
        // File file7 = new File(args[1] + "_MappedOutput7");
        // file7.delete();
        // FileOutputFormat.setOutputPath(job7, new Path(file7.getPath()));
        // job7.setMapperClass(StopAndFriskJoinMapper.class);
        //// Map only
        // job7.setNumReduceTasks(0);
        // job7.waitForCompletion(true);

        // Job 8: Map Stop and Frisk data to subways
        Configuration conf = new Configuration();
        Job job8 = Job.getInstance(conf, "Replicated Join -> Complaint with Subway Stations");
        job8.setJarByClass(App.class);
        String cachedSubways = new Path(args[0]).toString();
        Path crimeInput = new Path(args[1]);
        FileInputFormat.addInputPath(job8, crimeInput);
        // Cache the files
        job8.addCacheFile(new URI(cachedSubways + "#label1"));
        // Output
        File file8 = new File(args[1] + "_MappedOutput8");
        file8.delete();
        FileOutputFormat.setOutputPath(job8, new Path(file8.getPath()));
        job8.setMapperClass(ComplaintJoinMapper.class);
        // Map only
        job8.setNumReduceTasks(0);
        job8.waitForCompletion(true);
    }
}
